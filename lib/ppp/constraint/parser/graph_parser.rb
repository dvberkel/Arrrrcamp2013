# Autogenerated from a Treetop grammar. Edits may be lost.


require 'treetop'

module PPP
  module Constraint
    module Parser
      module Graph
        include Treetop::Runtime

        def root
          @root ||= :graph_definition
        end

        module GraphDefinition0
        end

        def _nt_graph_definition
          start_index = index
          if node_cache[:graph_definition].has_key?(index)
            cached = node_cache[:graph_definition][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          if has_terminal?("graph", false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure("graph")
            r1 = nil
          end
          s0 << r1
          if r1
            if has_terminal?(" ", false, index)
              r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(" ")
              r2 = nil
            end
            s0 << r2
            if r2
              if has_terminal?("end", false, index)
                r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure("end")
                r3 = nil
              end
              s0 << r3
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(GraphDefinition0)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:graph_definition][start_index] = r0

          r0
        end

      end

      class GraphParser < Treetop::Runtime::CompiledParser
        include Graph
      end

    end
  end
end
